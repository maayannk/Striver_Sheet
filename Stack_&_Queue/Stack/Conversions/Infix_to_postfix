class Solution {
    // Function to convert an infix expression to a postfix expression.
    public static int Prec(char ch) {
    switch (ch) {
    case '+':
    case '-':
      return 1;

    case '*':
    case '/':
      return 2;

    case '^':
      return 3;
    }
    return -1;
  }
    public static String infixToPostfix(String exp) {
        // Your code here
        int i=0;
        String ans = "";
        Stack<Character> st = new Stack<>();
        int n = exp.length();
        while(i<n){
            char ch = exp.charAt(i);
            if((ch>='A' && ch<='Z') || (ch>='a' && ch<='z') || (ch>='1' && ch<='9')){
                ans=ans+ch;
            }else if(ch=='('){
                st.push(ch);
            }else if(ch==')'){
                while(!st.isEmpty() && st.peek()!='('){
                    ans+=st.pop();
                }
                // if '(' is found so have another pop
                st.pop();
            }else{
               while(!st.isEmpty() && (Prec(ch)<=Prec(st.peek()))){
                   ans+=st.pop();
               }
               st.push(ch);
            }
            i++;
        }
        
        while(!st.isEmpty()){
            ans+=st.pop();
        }
        return ans;
       
       
    }
}